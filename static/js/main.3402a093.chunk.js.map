{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","App","props","SendRequest","bind","letTalk","readOutLoud","state","items","isTerry","sentenceResponse","isDone","onresult","e","current","resultIndex","transcript","results","setState","includes","this","className","onClick","style","color","display","fontWeight","start","msg","callserver","then","response","data","catch","error","alert","value","axios","get","message","speech","SpeechSynthesisUtterance","console","log","text","volume","rate","pitch","speechSynthesis","speak","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAMMA,EAAc,IADMC,OAAOC,mBAAqBD,OAAOE,yBAE7DH,EAAYI,KAAO,Q,IAkGJC,E,kDA/Fb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKE,YAAY,EAAKA,YAAYF,KAAjB,gBACjB,EAAKG,MAAM,CACTC,MAAM,GACNC,SAAQ,EACRC,iBAAiB,GACjBC,QAAO,GATO,E,qDAeT,IAAD,OAENf,EAAYgB,SAAU,SAACC,GACf,IAAMC,EAAUD,EAAEE,YACZC,EAAaH,EAAEI,QAAQH,GAAS,GAAGE,WACvC,EAAKE,SAAS,CAACV,MAAMQ,EAAWP,SAAQ,EACxCE,QAAO,KACNK,EAAWG,SAAS,UAAUH,EAAWG,SAAS,aACnD,EAAKD,SAAS,CAACT,SAAQ,IACvB,EAAKN,YAAYa,KAK3B,IAAMP,EAAQW,KAAKb,MAAME,QACnBE,EAAOS,KAAKb,MAAMI,OAGxB,OACE,yBAAKU,UAAU,OACb,4BAAQA,UAAU,cAClB,4BAAQA,UAAU,WAAWC,QAASF,KAAKf,SAA3C,QACA,uBAAGkB,MAAO,CAAEC,MAAOf,EAAU,QAAU,QAClCW,KAAKb,MAAMC,OAEhB,uBAAGe,MAAO,CAAEE,QAASd,EAAS,QAAU,OAAQa,MAAO,QAAQE,WAAY,SACtEN,KAAKb,MAAMG,sB,gCASpBd,EAAY+B,U,kCAGFC,GAAK,IAAD,OAEfR,KAAKS,WAAWD,GACfE,MACC,SAAAC,GACE,EAAKb,SAAS,CAACP,QAAO,EACtBD,iBAAiBqB,EAASC,OAC1B,EAAK1B,YAAY,EAAKC,MAAMG,qBAE9BuB,OACA,SAAAC,GACE,EAAKhB,SAAS,CAACP,QAAO,IACtBwB,MAAM,e,iCAOAC,GACV,OAAOC,IAAMC,IAAI,kCAAkCF,K,kCAG1CG,GACT,IAAMC,EAAS,IAAIC,yBACnBC,QAAQC,IAAIJ,GACZC,EAAOI,KAAKL,EAKZC,EAAOxC,KAAK,QACZwC,EAAOK,OAAO,EACdL,EAAOM,KAAK,EACZN,EAAOO,MAAM,EAEblD,OAAOmD,gBAAgBC,MAAMT,O,GA1FdU,IAAMC,WCGJC,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLQ,QAAQR,MAAMA,EAAMK,c","file":"static/js/main.3402a093.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.lang = 'fr-FR';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.SendRequest=this.SendRequest.bind(this)\n    this.letTalk=this.letTalk.bind(this)\n    this.readOutLoud=this.readOutLoud.bind(this)\n    this.state={\n      items:'', //<---Recorded Text\n      isTerry:false,\n      sentenceResponse:'',\n      isDone:false\n    };\n\n  }\n\n\n  render(){ // rÃ©sultat provisoire\n\n    recognition.onresult= (e)=>{\n            const current = e.resultIndex;\n            const transcript = e.results[current][0].transcript;\n              this.setState({items:transcript,isTerry:false,\n              isDone:false}) // Will change the Text\n            if(transcript.includes(\"Terry\")||transcript.includes(\"Claude\")){\n              this.setState({isTerry:true})\n              this.SendRequest(transcript);\n            }\n    }\n\n\n    const isTerry=this.state.isTerry\n    const isDone=this.state.isDone\n\n\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <button className=\"Talk_btn\" onClick={this.letTalk}>Talk</button>\n        <p style={{ color: isTerry ? 'white' : 'red' }}>\n            {this.state.items}\n        </p>\n        <p style={{ display: isDone ? \"block\" : \"none\", color: 'white',fontWeight: 'bold' }}>\n            {this.state.sentenceResponse}\n        </p>\n        </header>\n\n      </div>\n    );\n  }\n\n  letTalk(){ // start the recognition\n    recognition.start();\n }\n\n  SendRequest(msg){\n   //console.log(\"try to call the server w/ the message :\"+msg); // For Tests\n   this.callserver(msg) // actual server call\n   .then(\n     response=>{\n       this.setState({isDone:true,\n       sentenceResponse:response.data})\n       this.readOutLoud(this.state.sentenceResponse)\n     }\n   ).catch(\n     error=>{\n       this.setState({isDone:false})\n       alert(\"failed\")\n         }\n   )\n }\n\n\n // Call server function\n  callserver(value){\n  \treturn axios.get(\"http://192.168.0.22:8080/Terry/\"+value);\n }\n\nreadOutLoud(message){\n   const speech = new SpeechSynthesisUtterance();\n   console.log(message);\n   speech.text=message; //Text can be maximum 32767 characters\n\n\n   //speech.voice\n   //speech.voice=speechSynthesis.getVoices()[8];\n   speech.lang='fr-FR';\n   speech.volume=1; //sets the volume, accepts between [0 - 1], defaults to 1\n   speech.rate=1; //set the speed, accepts between [0.1 - 10], defaults to 1\n   speech.pitch=0; //set the pitch, accepts between [0 - 2], defaults to 1\n\n   window.speechSynthesis.speak(speech);\n }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}